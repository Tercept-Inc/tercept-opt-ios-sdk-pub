// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TerceptSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class TerceptOptimization {
  public init(_ networkCode: Swift.String, _ IDFA: Swift.String?, _ IDFV: Swift.String, _ params: [Swift.String : Swift.String])
  convenience public init(_ networkCode: Swift.String, _ IDFA: Swift.String?, _ IDFV: Swift.String)
  convenience public init(_ networkCode: Swift.String, useIdfa flag: Swift.Bool)
  convenience public init(_ networkCode: Swift.String, useIdfa flag: Swift.Bool, _ params: [Swift.String : Swift.String])
  public func fetch(_ adunits: [Swift.String])
  public func getCustomTargetingKeys(_ adunit: Swift.String) -> [Swift.String : Swift.String]
  public func logEvent(_ adunit: Swift.String, _ event: Swift.String)
  public func logEvent(_ adunit: Swift.String, _ event: Swift.String, _ customParameters: [Swift.String : Swift.String])
  public func logEvent(_ adunit: Swift.String, _ event: TerceptSDK.GAMEVENTS)
  public func logEvent(_ adunit: Swift.String, _ event: TerceptSDK.GAMEVENTS, _ customParameters: [Swift.String : Swift.String])
  public func sendEventsData()
  public func setCustomParameters(_ params: [Swift.String : Swift.String])
  public func getEventsData() -> Swift.String
  @objc deinit
}
public enum GAMEVENTS : Swift.String {
  case onAdClicked
  case onAdClosed
  case onAdFailedToLoad
  case onAdImpression
  case onAdLeftApplication
  case onAdLoaded
  case onAdOpened
  case onFirstQuartile
  case onMidPoint
  case onThirdQuartile
  case onStarted
  case onSkipped
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension TerceptSDK.GAMEVENTS : Swift.Equatable {}
extension TerceptSDK.GAMEVENTS : Swift.Hashable {}
extension TerceptSDK.GAMEVENTS : Swift.RawRepresentable {}
